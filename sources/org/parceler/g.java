package org.parceler;

import android.os.Parcelable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import org.parceler.NonParcelRepository;

public final class g {

    /* renamed from: a  reason: collision with root package name */
    private static final a f35797a;

    public interface b<T> {
        Parcelable a(T t);
    }

    static {
        a aVar = new a((byte) 0);
        f35797a = aVar;
        aVar.f35798a.putAll(NonParcelRepository.a().b());
    }

    public static <T> Parcelable a(T t) {
        if (t == null) {
            return null;
        }
        Class<?> cls = t.getClass();
        if (t == null) {
            return null;
        }
        a aVar = f35797a;
        b bVar = (b) aVar.f35798a.get(cls);
        if (bVar == null) {
            bVar = a.a(cls, cls.getClassLoader());
            if (Parcelable.class.isAssignableFrom(cls)) {
                bVar = new NonParcelRepository.s();
            }
            if (bVar != null) {
                b putIfAbsent = aVar.f35798a.putIfAbsent(cls, bVar);
                if (putIfAbsent != null) {
                    bVar = putIfAbsent;
                }
            } else {
                throw new f("Unable to find generated Parcelable class for " + cls.getName() + ", verify that your class is configured properly and that the Parcelable class " + a.a(cls) + " is generated by Parceler.");
            }
        }
        return bVar.a(t);
    }

    public static <T> T a(Parcelable parcelable) {
        if (parcelable == null) {
            return null;
        }
        return ((e) parcelable).getParcel();
    }

    static final class c<T> implements b<T> {

        /* renamed from: a  reason: collision with root package name */
        private final Constructor<? extends Parcelable> f35799a;

        public c(Class<T> cls, Class<? extends Parcelable> cls2) {
            try {
                this.f35799a = cls2.getConstructor(new Class[]{cls});
            } catch (NoSuchMethodException e2) {
                throw new f("Unable to create ParcelFactory Type", (Exception) e2);
            }
        }

        public final Parcelable a(T t) {
            try {
                return (Parcelable) this.f35799a.newInstance(new Object[]{t});
            } catch (InstantiationException e2) {
                throw new f("Unable to create ParcelFactory Type", (Exception) e2);
            } catch (IllegalAccessException e3) {
                throw new f("Unable to create ParcelFactory Type", (Exception) e3);
            } catch (InvocationTargetException e4) {
                throw new f("Unable to create ParcelFactory Type", (Exception) e4);
            }
        }
    }

    static final class a {

        /* renamed from: a  reason: collision with root package name */
        ConcurrentMap<Class, b> f35798a;

        private a() {
            this.f35798a = new ConcurrentHashMap();
        }

        /* synthetic */ a(byte b2) {
            this();
        }

        static String a(Class cls) {
            return cls.getName() + "$$Parcelable";
        }

        public static b a(Class cls, ClassLoader classLoader) {
            try {
                return new c(cls, classLoader.loadClass(a(cls)));
            } catch (ClassNotFoundException unused) {
                return null;
            }
        }
    }
}
